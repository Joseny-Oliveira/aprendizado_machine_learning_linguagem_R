arroz_marcas <- c("Camil","Tio João","Prato Fino")
feijao_marcas <- c("Kicaldo", "Milano", "Urbano")
interaction(arroz_marcas, feijao_marcas)
a<-c("Camisa 1","Camisa 2")
b<-c("Calca 1","Calca 2","Calca 3")
expand.grid(a,b)
expand.grid(arroz_marcas, feijao_marcas)
length(vendas)
length(vendas)
# Vetores
12 15 3 5
vendas <- c(12,15,3,5)
meses <- c ("Jan", "fev", "Mar","Abr")
vendas2 <- scan()
NOME <- x
vendas [1]
vendas [4]
vendas [c(1,4)]
vendas [1:3]
# modificando
vendas [3] <- 13
vendas [4] <- 15
vendas[c(1,4)] <- c(0,90)
vendas [2:4] <- c(40,35,28)
meses [3:4] <- c("Março","Abril")
# retirando
vendas [-4]
vendas <- vendas[-4]
vendas [4] <- 70
vendas [5:7] <- c(23,43,15)
length(vendas)
vendas
vendas <- vendas + vendas *2
vendas_v1 <- vendas
vendas_v1
vendas_v2 <- c(15,30,40,23,34,31,80)
vendas_v1 + vendas_v2
vendas_v1 - vendas_v2 + vendas *4
vendas_v1 - vendas_v2 + vendas *4
vendas_v1 - vendas_v2
vendas_v2 + vendas *4
vendas_v1 - vendas_v2 + vendas *4
vendas_v1 - vendas_v2 + vendas *4
vendas_v1 - vendas_v2 + vendas *4
vendas_v1 - vendas_v2 + vendas *4
vendas_v1 - vendas_v2 + vendas *4
vendas_v1 - vendas_v2 + vendas *4
vendas_v1 - vendas_v2 + vendas *4
vendas_v1 - vendas_v2 + vendas *4
vendas_v1 - vendas_v2 + vendas *4
vendas_v1 - vendas_v2 + vendas *4
vendas_v1 - vendas_v2 + vendas *4
vendas_v1 - vendas_v2 + vendas *4
vendas_v1 - vendas_v2 + vendas *4
vendas_v1 - vendas_v2 + vendas *4
vendas_v1 - vendas_v2 + vendas *4
vendas_v1 - vendas_v2 + vendas *4
vendas_v1 - vendas_v2 + vendas *4
vendas_v1 - vendas_v2 + vendas *4
vendas_v1 - vendas_v2 + vendas *4
vendas_v1 - vendas_v2 + vendas *4
vendas_v1 - vendas_v2 + vendas *4
vendas_v1 - vendas_v2 + vendas *4
vendas_v1 - vendas_v2 + vendas *4
vendas_v1 - vendas_v2 + vendas *4
vendedor1 <- c("Nike","Adidas","Olympikus")
vendedor2 <- c("Adidas","Mizuno","Topper")
union (vendedor1 , vendedor2)
intersect(vendedor1 , vendedor2)
setdiff(vendedor2, vendedor1)
setdiff(vendedor1, vendedor2)
arroz_marcas <- c("Camil","Tio João","Prato Fino")
feijao_marcas <- c("Kicaldo", "Milano", "Urbano")
interaction(arroz_marcas, feijao_marcas)
expand.grid(arroz_marcas, feijao_marcas)
a<-c("Camisa 1","Camisa 2")
b<-c("Calca 1","Calca 2","Calca 3")
expand.grid(a,b)
expand.grid(a,b)
a<-c("Camisa 1","Camisa 2")
b<-c("Calca 1","Calca 2","Calca 3")
expand.grid(a,b)
interaction(a,b)
produtos <- c("TV","Refrigerador","Notebook","Celular")
quantidades <- c(30,60,20,15)
quantidades > 10
quantidades > 100
quantidades > 10
quantidades > 20
quantidades >= 20
quantidades > 20
quantidades >= 20
quantidades <= 20
quantidades == 20
quantidades != 25
quantidades2 <- quantidades * 2
quantidades2
quantidades == quantidades2
quantidades != quantidades2
quantidades > quantidades2
quantidades2 > quantidades
quantidades [3] == 60
quantidades [3]
quantidades
produtos == "TV"
sum(produtos == "TV")
nomes<-c("Maria","João","Luiza","Paula")
match("Paula", nomes)
prova1<-c(8,9,5,6,7,8,8,8,5)
prova2<-c(2,3,4,3,6,4,2,9,5)
prova3<-c(1,6,2,9,1,10,2,9,2)
install.packages("dplyr")
library(dplyr)
install.packages("hflights")
library(hflights)
hflights
head(hflights)
head(hflights)
head(hflights, n = 10)
summary(hflights)
?hflights
str(hflights)
names(hflights)
class(hflights)
hflights <- tibble(hflights)
calss(hflights)
class(hflights)
hflights <- tbl_df(hflights)
class(hflights)
hflights
hflights$UniqueCarrier
lut <- c ("AA" = "American", "AS" = "Alaska","B6" = "JetBlue", "CO"= "Continental",
"DL" = "Delta", "OO" = "Skywest", "UA"= "United", "US"= "US_Airways",
"WN" = "Southwest", "EV" = "Atlantic_Southeast", "F9" =  "Frontier",
"FL" = "Airtrain", "MQ" = "American_Eagle", "XE" = "ExpressJet", "YV" = "Mesa")
lut
hflights$Carrier <- lut[hflights$UniqueCarrier]
hflights$UniqueCarrier
hflights$Carrier <- lut[hflights$UniqueCarrier]
hflights$UniqueCarrier
hflights$Carrier <- lut[hflights$UniqueCarrier]
hflights$UniqueCarrier
lut
hflights$Carrier <- lut[hflights$UniqueCarrier]
hflights$Carrier
library(hflights)
glimpse(hflights)
library(dplyr)
glimpse(hflights)
hflights$CancellationCode
lut <- c("A" = "carrier", "B" = "weather", "C" = "FFA", "D" = "security",
" " = "not cancelled")
hflights$CancellationCode <- lut[hflights$CancellationCode]
hflights$CancellationCode
glimpse(hflights)
select(hflights, var1:var3)
select(hflights, ActualElapsedTime , AirTime, ArrDelay, DepDelay)
select(hflights, Origin: Cancelled)
select(hflights, - (DepTime:AirTime))
a -< 10
a
a
a <- 10
a
b
b = 10
b
B
c <- 10
10 -> c
c -> d
c -> 10
c -> 10 # Nao podemos criar variaveis com nome de numero
c <- 10 # Nao podemos criar variaveis com nome de numero
c -> d
d
c <- a + b
c
a <- "Heitor"
b <- "Joao"
c <- a + b
a <- 10
b <- 5
c <- a + b
c
a
a <- "Heitor"
b <- "Joao"
a <- "Heitor"
b <- "Joao"
c <- c (a,b)
c
c <- ("Heitor", "Joao")
c
?c
a <- c(10,5,15,20)
a
?summary
summary(a)
min(a)
max(a)
sd(a)
summary(c)
a[1]
a[1:3]
a[1,3]
a[1]
summary(a)
summary(c)
# Funcao de um pacote
?str_c
install.packages("stringr")
# Funcao de um pacote
?str_c
library(stringr)
# Funcao de um pacote
?str_c
NomeCompleto <- str_c(Nome, Sobrenome)
Nome <- "Joao"
Sobrenome <- "Silva"
NomeCompleto <- str_c(Nome, Sobrenome)
NomeCompleto
NomeCompleto <- str_c(Nome, " ", Sobrenome)
NomeCompleto <- str_c(Nome, " ", Sobrenome)
NomeCompleto
NomeCompleto
5+5
10 - 8
9/3
4*2
4 ** 2
4 ^ 2
5 == 6
5 == 5
5 != 6
5 != 5
4 > 2
4 > 6
3 < 2
3 < 4
6 == 6 & 7 == 8
6 == 6 & 7 != 8
5 > 3 & 5 < 8
6 == 6 | 7 == 8
!6 == 6
4 >= 5
4 >= 4
6 <= 8
6 <= 5
6 == 6 & 7 == 8
6 == 6 & 7 != 8
5 > 3 & 5 < 8
5 > 3 | 5 < 8
nome <- c ("joseny", "äwdrey")
is.vector(nomes)
is.vector(nome)
peso <- c (45,50,60,55,58,56,48)
altura <- c(1.54,1.55,1.65,1.60,1.65,1.63,1.60)
plot(peso,altura)
plot( peso,altura)
peso <- c (45,50,60,55,58,56,48)
altura <- c(1.54,1.55,1.65,1.60,1.65,1.63,1.60)
plot( peso,altura)
plot(peso,altura)
plot(peso,altura)
lm(altura ~ peso)
abline(lm(altura ~ peso))
x <- 1:250
x
rnorm(5)
y <- rnorm(250)
y
plot (x,y)
y <- rnorm(250) + x
y <- rnorm(250)
y <- rnorm(250) + x
y
plot (x,y)
rnorm(5, sd =30)
y <- rnorm(250 , sd =25) + x
plot (x,y)
?rnorm
hist(rnorm(250, sd = 25))
hist(rnorm(250, mean = 1000, sd = 25))
hist(rnorm(250, mean = 1000, sd = 25))
# Definindo o numero randomico
set.seed(1)
hist(rnorm(250, mean = 1000, sd = 25))
# Definindo o numero randomico
set.seed(1)
# criando o modelo
?lm
lm(y ~ x)
# inserindo a reta no gráfico
abline(-2.389, 1.028)
# inserindo a reta no gráfico
abline(-2.389, 1.028)
plot (x,y)
# inserindo a reta no gráfico
abline(-2.389, 1.028)
# inserindo a reta no grafico
abline(lm(y ~ x))
# inserindo a reta no gráfico
abline(-2.389, 1.028)
# inserindo a reta no grafico
abline(lm(y ~ x))
# grafico melhorado
plot (x, y, pch = 19, col = "blue")
abline(lm(y ~ x), col = "red", lwd = 2)
?plot
?plot
df <- data.frame(Pessoa = seq(1:300),
Idade = NA,
Peso = NA,
Altura = NA,
Emprego = NA)
df$Idade  <- sample(20:60, 300, replace = T)
df$Peso   <-  sample(45:120, 300, replace = T)
df$Altura <-sample(145:195, 300, replace = T)
df$Emprego <- sample(0:1, 300, replace = T)
View(df)
df$Idade [1:4] <- NA
df$Peso[20:102] <- NA
df$Altura [108:250] <- NA
View(df)
View(df)
is.na(df)
?any
any(is.na(df))
df_1 <- na.omit(df)
View(df_1)
nrow(df)
nrow(df_1)
NAs <- round(colSums(is.na(df)) * 100/ nrow(df), 2)
NAs
NAs [NAs >0]
NAs [NAs >1]
NAs [NAs >100]
NAs [NAs > 0]
colSums( is.na(df))
nrow(df)
4/300
83/300
143/300
NAs
df$Altura <- NULL
NAs
df$Peso [is.na(df$Peso)] <- mean (df$Peso, na.rm = T)
mean(df$Peso)
df$Peso
mean(df$Peso)
mean(df$Peso)
df$Peso [is.na(df$Peso)] <- mean (df$Peso, na.rm = T)
mean(df$Peso)
df_1 <- na.omit(df)
nrow(df)
nrow(df_1)
NAs <- round(colSums(is.na(df_1)) * 100/ nrow(df_1), 2)
NAs
any(is.na(df))
any(is.na(df_1))
library(mlbench)
data(PimaIndiansDiabetes)
df <- PimaIndiansDiabetes
cor(df)
cor(df)
install.packages("mlbench")
install.packages("mlbench")
library(mlbench)
data(PimaIndiansDiabetes)
df <- PimaIndiansDiabetes
cor(df)
str(df)
str(df)
df$diabetes <- as.numeric(df$diabetes)
str(df)
cor(df)
library(corrplot)
corrplot(cor(df), method = "color")
library(mlbench)
data("PimaIndiansDiabetes")
data("PimaIndiansDiabetes")
df <- PimaIndiansDiabetes
cor(df)
str(df)
df$diabetes <- as.numeric(df$diabetes)
str(df)
View(df)
library(corrplot)
corrplot(cor(df))
a <- c (423,464,69,919,123,258)
View(a)
for (i in a)
print(x)
x <- 0
for (i in a) {
x <- x + i
}
print(x)
a <- c (423,464,69,519,123,258)
View(a)
x <- 0
for (i in a) {
x <- x + i
}
print(x)
b <- c(51,36,123,98,23,37,63,3)
x <- 0
for (i in b){
x <- x +i
}
print (x)
soma <- function(y){
x <- 0
for (i in y) {
x <- x + i
}
print(x)
}
soma(a)
soma(b)
x
soma2 <- function(y,z) {
x <- 0
c <- 0
for (i in y ){
c <- c + 1
x <- z[c] + i
print(x)
}
}
soma2(a,b)
soma2(b,a)
a+b
sum(a)
sum(b)
a+b
a+b
sum(a+b)
setwd(C:/Users/jgo_awd/Documents/Ciencia_de_Dados/Didatica-Tech/5-Matrix_Confusao)
setwd("C:/Users/jgo_awd/Documents/Ciencia_de_Dados/Didatica-Tech/5-Matrix_Confusao")
setwd("C:/Users/jgo_awd/Documents/Ciencia_de_Dados/Didatica-Tech/5-Matrix_Confusao")
df <- data.frame(altura =c(1.5,1.4,1.6,1.8),
peso =c(40,45,60,80))
df
library(caret)
?preProcess
scale <- predict(preProcess(df,method = "scale"), df)
scale
sd(c(1.5,1.4,1.6,1.8))
c(1.5,1.4,1.6,1.8) / 0.1707825
sd(c(40,45,60,80))
c(40,45,60,80) / 17.96
setwd("C:/Users/jgo_awd/Documents/Ciencia_de_Dados/Didatica-Tech/6-KNN")
setwd("C:/Users/jgo_awd/Documents/Ciencia_de_Dados/Didatica-Tech/6-KNN")
# Pacote que contem o dataset
library(mclust)
df <- wdbc
df$ID <- NULL
View(df)
library(caret)
set.seed(1)
filtro <- createDataPartition(y=df$Diagnosis, p = 0.7, list = F)
treino <- df[filtro,]
teste <- df[-filtro,]
# Criando o modelo
set.seed(1)
modelo <- train(Diagonis ~.,
data = treino,
method = "knn",
preProcess= "scale")
modelo <- train(Diagonis ~.,
data = treino,
method = "knn",
preProcess= "scale")
modelo <- train(Diagonis ~ .,
data = treino,
method = "knn",
preProcess= "scale")
setwd("C:/Users/jgo_awd/Documents/Ciencia_de_Dados/Didatica-Tech/6-KNN")
# Pacote que contem o dataset
library(mclust)
# Carregando o dataset
df <- wdbc
df$ID <- NULL
View(df)
library(caret)
# Criando matriz com linhas dos dados de treino  - 70 %
set.seed(1)
filtro <- createDataPartition(y=df$Diagnosis, p = 0.7, list = F)
# dados de treino e teste
treino <- df[filtro,]
teste <- df[-filtro,]
# https://github.com/topepo/caret/available-models.html
# https://github.com/topepo/caret
# Criando o modelo
set.seed(1)
modelo <- train(Diagonis ~ .,
data = treino,
method = "knn",
preProcess= "scale")
modelo <- train(Diagnosis ~ .,
data = treino,
method = "knn",
preProcess= "scale")
mean(modelo$results$Accuracy)
modelo$bestTune$k
modelo$results
Prev <- predict(modelo,teste)
confusionMatrix(Prev,
teste$Diagnosis,
dnn =c('Previsto', 'Real'))
